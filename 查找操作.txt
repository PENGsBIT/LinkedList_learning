//查找倒数第K个结点（k > 0）
public static Node searchKthLastNode(Node head, int k) {
	if (head == null || k < 0)
		return head;
	if (k > getListLength(head))
		return null;
	Node target = head;
	Node temp = head;
	for (int i = 0; i < k; i++) {
		temp = temp.next;
	}
	// n-k
	while (temp != null) {
		target = target.next;
		temp = temp.next;
	}
	temp = null;
	target.next = null;
	// System.out.print("target.value: " + target.value + "  ");
	return target;
}

//查找单链表的中间结点 
public static Node searchMiddleNode(Node head) {
	if (head == null || head.next == null)
		return head;
	// 一般查找问题都是两个指向头节点的指针（快慢指针）共同移动。
	int length = getListLength(head);
	Node fast = head;
	Node slow = head;
	Node temp = slow;// 如果有两个中间节点，取前一个
	while (fast != null && fast.next != null) {
		temp = slow;
		fast = fast.next.next;
		slow = slow.next;
	}
	temp.next = null;
	slow.next = null;
	System.out.print("temp.value = " + temp.value + " slow.value = "
			+ slow.value);
	if (length % 2 != 0)
		return slow;
	else
		return temp;
}

// 查找链表中中间节点 09/05/2017 补充另一种无需求长度的方法
// 一开始就使快指针先走一步
public static Node searchMiddleNode2nd(Node head) {
	if (head == null || head.next == null)
		return head;
	Node pre = head;
	Node cur = head.next.next;
	while (cur != null) {
		pre = pre.next;
		if (cur.next == null || cur.next.next == null)
			break;
		cur = cur.next.next;
	}
	System.out.print("pre = " + pre.value);
	return pre;
}
